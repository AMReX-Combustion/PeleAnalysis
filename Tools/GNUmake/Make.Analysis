AMREX_HOME         ?= ../../../../../amrex
PELE_PHYSICS_HOME  ?= ../../../../PelePhysics
PELE_ANALYSIS_HOME ?= ../../../../PeleAnalysis

TOP := $(PELE_ANALYSIS_HOME)

#Turn off all fortran in amrex
#ifneq ($(USE_MASA), TRUE)
#  BL_NO_FORT = TRUE
#endif
USE_SUNDIALS = TRUE

include $(AMREX_HOME)/Tools/GNUMake/Make.defs
include $(PELE_PHYSICS_HOME)/ThirdParty/Make.ThirdParty

# PeleC uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

ifeq ($(USE_FORCING), TRUE)
  DEFINES += -DPELEC_USE_FORCING
endif

ifeq ($(USE_EB), TRUE)
  DEFINES += -DPELEC_USE_EB
  ifeq ($(DIM), 1)
    $(error EB is not supported in 1D)
  endif
endif

all: $(executable) 
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS

# PelePhysics
EOS_HOME       ?= $(PELE_PHYSICS_HOME)/Eos
REACTIONS_HOME ?= $(PELE_PHYSICS_HOME)/Reactions
TRAN_HOME      ?= $(PELE_PHYSICS_HOME)/Transport
PP_SRC_HOME     = $(PELE_PHYSICS_HOME)/Source
INCLUDE_LOCATIONS += $(PP_SRC_HOME)
VPATH_LOCATIONS   += $(PP_SRC_HOME)
Bpack             += $(PP_SRC_HOME)/Make.package
Blocs             += $(PP_SRC_HOME)

# EOS
EOS_HOME = $(PELE_PHYSICS_HOME)/Eos/
ifeq ($(Eos_Model),$(filter $(Eos_Model),GammaLaw))
   DEFINES += -DUSE_GAMMALAW_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Fuego))
   DEFINES += -DUSE_FUEGO_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Soave-Redlich-Kwong))
   DEFINES += -DUSE_SRK_EOS
endif
INCLUDE_LOCATIONS += $(EOS_HOME)
VPATH_LOCATIONS   += $(EOS_HOME)
Bpack             += $(EOS_HOME)/Make.package
Blocs             += $(EOS_HOME)

# Reactions
include $(REACTIONS_HOME)/Make.package
INCLUDE_LOCATIONS += $(REACTIONS_HOME)
VPATH_LOCATIONS   += $(REACTIONS_HOME)
ifeq ($(Eos_Model), GammaLaw)
  ifneq ($(Chemistry_Model), Null)
    $(error Chemistry_Model definition not compatible with Eos_Model=GammaLaw)
  endif
endif
CHEM_HOME = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models/$(Chemistry_Model)
CHEM_ALL  = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models
VPATH_LOCATIONS += $(CHEM_HOME) $(CHEM_ALL)
Bpack += $(CHEM_HOME)/Make.package \
         $(CHEM_ALL)/Make.package
Blocs += $(CHEM_HOME) $(CHEM_ALL)
Blocs   += $(PELE_PHYSICS_HOME)/Support/Fuego/Evaluation

ifdef Chemistry_Model
  CHEM_HOME = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models/$(Chemistry_Model)
  Blocs += $(PELE_PHYSICS_HOME)/Support/Fuego/Evaluation
endif
VPATH_LOCATIONS += $(CHEM_HOME)
Bpack += $(CHEM_HOME)/Make.package
Blocs += $(CHEM_HOME)

# Transport
include $(TRAN_HOME)/Make.package
INCLUDE_LOCATIONS += $(TRAN_HOME)
VPATH_LOCATIONS   += $(TRAN_HOME)
USE_FUEGO = FALSE

Blocs   += $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism

ifeq ($(Transport_Model), Simple)
  DEFINES += -DUSE_SIMPLE_TRANSPORT
endif
ifeq ($(Transport_Model), EGLib)
  DEFINES += -DEGLIB_TRANSPORT
  USE_FUEGO = TRUE
endif
ifeq ($(Transport_Model), Constant)
  DEFINES += -DUSE_CONSTANT_TRANSPORT
endif
ifeq ($(Transport_Model), Sutherland)
  DEFINES += -DUSE_SUTHERLAND_TRANSPORT
endif

# Utilities
include $(PELE_PHYSICS_HOME)/Utility/PMF/Make.package

Pdirs := Base Boundary Extern/amrdata AmrCore
ifeq ($(USE_EB), TRUE)
  Pdirs += EB
  Bpack += $(AMREX_HYDRO_HOME)/Redistribution/Make.package
  Blocs += $(AMREX_HYDRO_HOME)/Redistribution
endif

ifeq ($(USE_PARTICLES), TRUE)
  DEFINES+=-DAMREX_PARTICLES
  Pdirs += Particle
  DEFINES+=-DSPRAY_FUEL_NUM=$(SPRAY_FUEL_NUM)
  ifeq ($(USE_SPRAY_SOA), TRUE)
    DEFINES+=-DUSE_SPRAY_SOA
  endif
  Bpack   += $(PELEC_MP_HOME)/Source/PP_Spray/Make.package
  Blocs   += $(PELEC_MP_HOME)/Source/PP_Spray
  INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/Particle
  VPATH_LOCATIONS   += $(AMREX_HOME)/Src/Particle
endif

Bpack += $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)
Blocs += $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir))

##Bdirs +=  $(PELE_ANALYSIS_HOME)/Tools/Util
Bpack += $(foreach dir, $(Bdirs), $(dir)/Make.package)
Blocs += $(foreach dir, $(Bdirs), $(dir))

$(info $${Bpack} is [${Bpack}])

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS += $(AMREX_HOME)/Tools/C_scripts

ifdef Chemistry_Model
  MNAMES += CHEMISTRY=$(Chemistry_Model)
endif

AMReX_buildInfo.cpp:
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --FCOMP "$(FCOMP)" --FCOMP_VERSION "$(FCOMP_VERSION)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(TOP) $(AMREX_HOME) $(PELE_PHYSICS_HOME)"

include $(AMREX_HOME)/Tools/GNUMake/Make.rules


clean::
	$(SILENT) $(RM) AMReX_buildInfo.cpp

TPL:
	echo "==> Building SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make sundials AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) CUDA_ARCH=$(CUDA_ARCH)

TPLclean:
	@echo "==> Removing SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP)  CUDA_ARCH=$(CUDA_ARCH) clean

TPLrealclean:
	@echo "==> Removing SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) CUDA_ARCH=$(CUDA_ARCH) realclean
#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
#print-%: ; @echo $* is $($*) ; $(SILENT) $(RM) AMReX_buildInfo.cpp
