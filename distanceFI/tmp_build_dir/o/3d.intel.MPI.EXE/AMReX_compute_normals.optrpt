Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -Itmp_build_dir/o/3d.intel.MPI.EXE -I. -I. -I/home/zou00066/peleLM/amrex/Src/Base -I/home/zou00066/peleLM/amrex/Src/Boundary -I/home/zou00066/peleLM/amrex/Src/EB -I/home/zou00066/peleLM/amrex/Src/AmrCore -I../Tools/SDFGen -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/lib -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -implicitnone -module tmp_build_dir/o/3d.intel.MPI.EXE -DBL_LANG_FORT -DAMREX_LANG_FORT -DBL_USE_MPI -DAMREX_USE_MPI -DAMREX_GIT_VERSION="20.06-82-gdf3e65beac99-dirty" -DAMREX_LAUNCH= -DAMREX_DEVICE= -DAMREX_CUDA_FORT_GLOBAL= -DAMREX_CUDA_FORT_DEVICE= -DAMREX_CUDA_FORT_HOST= -DAMREX_CUDA_FORT_HOST_DEVICE= -DBL_SPACEDIM=3 -DAMREX_SPACEDIM=3 -DBL_FORT_USE_UNDERSCORE -DAMREX_FORT_USE_UNDERSCORE -DBL_Linux -DAMREX_Linux -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION -DAMREX_USE_EB -c -o tmp_build_dir/o/3d.intel.MPI.EXE/AMReX_compute_normals.o

Begin optimization report for: AMREX_EB_COMPUTE_NORMALS

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(31,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(32,8)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(33,11)
         remark #15389: vectorization support: reference apx(i,j,k) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(36,17) ]
         remark #15389: vectorization support: reference apx(i+1,j,k) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(37,17) ]
         remark #15389: vectorization support: reference apy(i,j,k) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(38,17) ]
         remark #15389: vectorization support: reference apy(i,j+1,k) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(39,17) ]
         remark #15389: vectorization support: reference apz(i,j,k) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(40,17) ]
         remark #15389: vectorization support: reference apz(i,j,k+1) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(41,17) ]
         remark #15389: vectorization support: reference normal(i,j,k,1) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(51,17) ]
         remark #15389: vectorization support: reference normal(i,j,k,2) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(52,17) ]
         remark #15389: vectorization support: reference normal(i,j,k,3) has unaligned access   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(53,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.039
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 6 
         remark #15457: masked unaligned unit stride stores: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 184 
         remark #15477: vector cost: 309.500 
         remark #15478: estimated potential speedup: 0.590 
         remark #15485: serialized function calls: 1
         remark #15488: --- end vector cost summary ---
         remark #15489: --- begin vector function matching report ---
         remark #15490: Function call: IS_SINGLE_VALUED_CELL with simdlen=2, actual parameter types: (vector)   [ /home/zou00066/peleLM/amrex/Src/EB/AMReX_compute_normals.F90(35,19) ]
         remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
         remark #15493: --- end vector function matching report ---
      LOOP END
   LOOP END
LOOP END
===========================================================================
