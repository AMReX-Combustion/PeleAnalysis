Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I. -I. -I/home/zou00066/peleLM/amrex/Src/Base -I/home/zou00066/peleLM/amrex/Src/Boundary -I/home/zou00066/peleLM/amrex/Src/EB -I/home/zou00066/peleLM/amrex/Src/AmrCore -I../Tools/SDFGen -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi -I/share/apps/opt/HWLOC/2.1.0/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -std=c++14 -pthread -DBL_USE_MPI -DAMREX_USE_MPI -DAMREX_GIT_VERSION="20.06-82-gdf3e65beac99-dirty" -DAMREX_LAUNCH= -DAMREX_DEVICE= -DAMREX_CUDA_FORT_GLOBAL= -DAMREX_CUDA_FORT_DEVICE= -DAMREX_CUDA_FORT_HOST= -DAMREX_CUDA_FORT_HOST_DEVICE= -DBL_SPACEDIM=3 -DAMREX_SPACEDIM=3 -DBL_FORT_USE_UNDERSCORE -DAMREX_FORT_USE_UNDERSCORE -DBL_Linux -DAMREX_Linux -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION -DAMREX_USE_EB -c -o tmp_build_dir/o/3d.intel.MPI.EXE/makelevelset3.o -pthread

Begin optimization report for: make_level_set3(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, const Vec3r &, amrex::Real, int, int, int, Array3r &, amrex::Real, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../Tools/SDFGen/array1.h(238,6) inlined into ../Tools/SDFGen/makelevelset3.cpp(218,8)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/array1.h(238,6) inlined into ../Tools/SDFGen/makelevelset3.cpp(218,8)
   remark #15388: vectorization support: reference this->data[i] has aligned access   [ ../Tools/SDFGen/array1.h(238,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/array1.h(238,6) inlined into ../Tools/SDFGen/makelevelset3.cpp(218,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(220,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(220,36)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(220,36)
      remark #15388: vectorization support: reference closest_tri.a.a[i] has aligned access   [ ../Tools/SDFGen/array1.h(88,40) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(220,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(221,43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(221,43)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(221,43)
      remark #15388: vectorization support: reference intersection_count.a.a[i] has aligned access   [ ../Tools/SDFGen/array1.h(88,40) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../Tools/SDFGen/array1.h(88,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(221,43)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(266,4)
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(267,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(268,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(269,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(270,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(271,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(272,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(273,7) ]
   remark #15382: vectorization support: call to function sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &) cannot be vectorized   [ ../Tools/SDFGen/makelevelset3.cpp(274,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(225,32)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(235,7)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(235,33)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

         LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(235,59)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(254,7)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(254,33)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sweep(const std::vector<Vec3ui, std::allocator<Vec3ui>> &, const std::vector<Vec3r, std::allocator<Vec3r>> &, Array3r &, Array3i &, const Vec3r &, amrex::Real, int, int, int, const std::vector<Vec3r, std::allocator<Vec3r>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(165,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(165,32)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(165,60)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: point_triangle_distance(const Vec3r &, const Vec3r &, const Vec3r &, const Vec3r &, const Vec3r &, amrex::Real)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../Tools/SDFGen/vec.h(204,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(30,20)
   remark #15389: vectorization support: reference x13.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15389: vectorization support: reference x13.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 2.111
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(204,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(30,35)
   remark #15389: vectorization support: reference x23.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15389: vectorization support: reference x23.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 2.111
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(333,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(30,48)
   remark #15389: vectorization support: reference x13.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,39) ]
   remark #15389: vectorization support: reference x23.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.900
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(333,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(32,18)
   remark #15389: vectorization support: reference x13.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,39) ]
   remark #15389: vectorization support: reference x03.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.900
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(333,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(32,34)
   remark #15389: vectorization support: reference x23.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,39) ]
   remark #15389: vectorization support: reference x03.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.900
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(66,4)
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(66,4)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,33)
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,33)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,40)
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,40)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(216,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,13)
   remark #15389: vectorization support: reference x0->v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(216,43) ]
   remark #15389: vectorization support: reference U15_V.U15_V[i] has unaligned access   [ ../Tools/SDFGen/vec.h(216,50) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.600
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.710 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../Tools/SDFGen/vec.h(104,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(29,17)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(104,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(29,29)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(104,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(29,41)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/makelevelset3.cpp(45,4)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(91,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,33)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(91,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(69,40)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: point_segment_distance(const Vec3r &, const Vec3r &, const Vec3r &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../Tools/SDFGen/vec.h(204,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(12,20)
   remark #15389: vectorization support: reference dx.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15389: vectorization support: reference dx.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(204,43) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 2.111
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(333,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(14,35)
   remark #15389: vectorization support: reference Uf_V.Uf_V[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,39) ]
   remark #15389: vectorization support: reference dx.v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(333,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.900
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,24)
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,24)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,35)
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15388: vectorization support: reference w.v[i] has aligned access   [ ../Tools/SDFGen/vec.h(124,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(124,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,35)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(216,4) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,11)
   remark #15389: vectorization support: reference x0->v[i] has unaligned access   [ ../Tools/SDFGen/vec.h(216,43) ]
   remark #15389: vectorization support: reference U10_V.U10_V[i] has unaligned access   [ ../Tools/SDFGen/vec.h(216,50) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.600
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.710 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../Tools/SDFGen/vec.h(104,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(11,17)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(104,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(14,42)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../Tools/SDFGen/vec.h(91,7) inlined into ../Tools/SDFGen/makelevelset3.cpp(21,35)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
