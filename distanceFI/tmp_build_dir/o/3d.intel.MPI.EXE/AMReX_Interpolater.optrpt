Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I. -I. -I/home/zou00066/peleLM/amrex/Src/Base -I/home/zou00066/peleLM/amrex/Src/Boundary -I/home/zou00066/peleLM/amrex/Src/EB -I/home/zou00066/peleLM/amrex/Src/AmrCore -I../Tools/SDFGen -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi -I/share/apps/opt/HWLOC/2.1.0/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -std=c++14 -pthread -DBL_USE_MPI -DAMREX_USE_MPI -DAMREX_GIT_VERSION="20.06-82-gdf3e65beac99-dirty" -DAMREX_LAUNCH= -DAMREX_DEVICE= -DAMREX_CUDA_FORT_GLOBAL= -DAMREX_CUDA_FORT_DEVICE= -DAMREX_CUDA_FORT_HOST= -DAMREX_CUDA_FORT_HOST_DEVICE= -DBL_SPACEDIM=3 -DAMREX_SPACEDIM=3 -DBL_FORT_USE_UNDERSCORE -DAMREX_FORT_USE_UNDERSCORE -DBL_Linux -DAMREX_Linux -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION -DAMREX_USE_EB -c -o tmp_build_dir/o/3d.intel.MPI.EXE/AMReX_Interpolater.o -pthread

Begin optimization report for: amrex::NodeBilinear::CoarseBox(amrex::NodeBilinear *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(68,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(70,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::NodeBilinear::CoarseBox(amrex::NodeBilinear *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(88,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(90,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::NodeBilinear::interp(amrex::NodeBilinear *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(837,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(124,71)
   remark #26015: Exception can be thrown by the call to amrex::detail::Assert_host_doit(const char *, const char *, int, const char *)   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(505,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(507,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(508,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(510,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(510,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
            remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(511,31) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(511,47) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(512,31) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(512,47) ]
            remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(513,31) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(513,47) ]
            remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(515,31) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(515,49) ]
            remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(516,31) ]
            remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(516,49) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(517,31) ]
            remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(517,49) ]
            remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(519,31) ]
            remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(519,51) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(521,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(522,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(523,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*3)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(524,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*4)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(525,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*5)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(526,26) ]
            remark #15389: vectorization support: reference slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*6)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(527,26) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.798
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15450: unmasked unaligned unit stride loads: 11 
            remark #15451: unmasked unaligned unit stride stores: 7 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 407 
            remark #15477: vector cost: 57.000 
            remark #15478: estimated potential speedup: 6.820 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(510,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(133,5)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(552,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(552,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
   remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+fine_comp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(555,25) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8f_V.U8f_V+(kc-U73_V.U73_V)*U>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(555,47) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(557,35) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(558,35) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(561,38) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(556,35) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(559,38) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(560,38) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <slopefab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_>, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(562,41) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.160
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 8 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 243 
   remark #15477: vector cost: 226.000 
   remark #15478: estimated potential speedup: 1.070 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(552,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(124,71)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(90,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(124,71)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(544,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(545,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(548,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(138,5)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::CellBilinear::CoarseBox(amrex::CellBilinear *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(151,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(165,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(151,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellBilinear::CoarseBox(amrex::CellBilinear *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(161,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(165,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellBilinear::interp(amrex::CellBilinear *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(206,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(206,24)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(206,24)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(210,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(210,24)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(210,24)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeLinear::CoarseBox(amrex::CellConservativeLinear *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(266,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeLinear::CoarseBox(amrex::CellConservativeLinear *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(257,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeLinear::interp(amrex::CellConservativeLinear *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(34,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
   remark #15389: vectorization support: reference U42_V[i-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(37,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(42,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
   remark #15389: vectorization support: reference U42_V[j-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(45,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(50,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(317,36)
   remark #15389: vectorization support: reference U42_V[k-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(53,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(216,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(217,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(220,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(221,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(222,19) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.386
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 43 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 7.090 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(220,19) ]
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(221,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(222,19) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.842
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 43 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 7.090 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(67,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(68,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.273
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.654
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(82,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(83,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27) and p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(89,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(90,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27) and p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(101,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(102,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27) and p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(108,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(109,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27) and p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(120,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(128,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(141,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(149,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(162,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(170,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(183,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(191,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(232,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(233,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(235,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between U7d_V (240:88) and U7d_V (239:90)
         remark #15346: vector dependence: assumed OUTPUT dependence between U7d_V (239:90) and U7d_V (240:88)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(273,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(274,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(275,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,50) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.302
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 4 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 133 
            remark #15477: vector cost: 12.000 
            remark #15478: estimated potential speedup: 9.700 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,50) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,50) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.689
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 4 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 133 
            remark #15477: vector cost: 12.000 
            remark #15478: estimated potential speedup: 9.700 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(311,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(328,9)
   remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+fine_comp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,25) ]
   remark #15389: vectorization support: reference Ua2_V.Ua2_V.Ua2_V.Ua2_V.Ua2_V[i-U71_V.U71_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8f_V.U8f_V+(kc-U73_V.U73_V)*U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,47) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(315,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(316,49) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.112
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 206.000 
   remark #15478: estimated potential speedup: 0.630 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(338,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(339,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(340,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(343,21) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(344,25) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed ANTI dependence between *U76_V (346:33) and cmn (346:33)
                  remark #15346: vector dependence: assumed FLOW dependence between cmn (346:33) and *U76_V (346:33)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(344,25) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(344,25) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(345,29) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(67,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(68,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.273
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.654
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(82,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(83,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27) and p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(89,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(90,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27) and p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(101,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(102,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27) and p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(108,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(109,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27) and p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(120,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(128,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(141,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(149,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(162,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(170,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(183,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(191,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(359,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(360,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(362,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between U85_V (367:88) and U85_V (366:90)
         remark #15346: vector dependence: assumed OUTPUT dependence between U85_V (366:90) and U85_V (367:88)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(408,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(345,9)
   remark #15389: vectorization support: reference Ua2_V.Ua2_V.Ua2_V.Ua2_V.Ua2_V[i-U73_V.U73_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(410,45) ]
   remark #15389: vectorization support: reference fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(415,30) ]
   remark #15389: vectorization support: reference fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(417,30) ]
   remark #15389: vectorization support: reference fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(419,30) ]
   remark #15389: vectorization support: reference fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(415,30) ]
   remark #15389: vectorization support: reference fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(419,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(410,65) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(411,65) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(412,65) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mm.p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8b_V.U8b_V+(kc-U73_V.U73_V>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(414,40) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mm.p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8b_V.U8b_V+(kc-U73_V.U73_V>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(415,44) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mm.p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8b_V.U8b_V+(kc-U73_V.U73_V>, masked, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(416,47) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <fafab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U7>, masked, stride is 1   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(417,30) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mm.p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8b_V.U8b_V+(kc-U73_V.U73_V>, masked, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(417,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.123
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 224 
   remark #15477: vector cost: 346.000 
   remark #15478: estimated potential speedup: 0.640 
   remark #15482: vectorized math library calls: 2 
   remark #15486: divides: 2 
   remark #15487: type converts: 7 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(311,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(355,9)
   remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+fine_comp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,25) ]
   remark #15389: vectorization support: reference Ua2_V.Ua2_V.Ua2_V.Ua2_V.Ua2_V[i-U71_V.U71_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8f_V.U8f_V+(kc-U73_V.U73_V)*U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,47) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(315,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(316,49) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.112
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 206.000 
   remark #15478: estimated potential speedup: 0.630 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(296,52)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(227,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(323,9)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(305,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(328,9)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(306,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(328,9)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(308,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(328,9)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(336,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(340,9)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(402,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(345,9)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(403,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(345,9)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(405,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(345,9)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(435,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(436,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(438,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(440,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
            remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(443,60) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
               remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

               LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(444,60) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
                  remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) ]

                  LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(445,60) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(350,9)
                     remark #15523: loop was not vectorized: loop control variable ioff was found, but loop iteration count cannot be computed before executing the loop
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(305,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(355,9)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(306,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(355,9)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(308,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(355,9)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeProtected::CoarseBox(amrex::CellConservativeProtected *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(553,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeProtected::CoarseBox(amrex::CellConservativeProtected *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(544,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeProtected::interp(amrex::CellConservativeProtected *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(34,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
   remark #15389: vectorization support: reference U42_V[i-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(37,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(42,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
   remark #15389: vectorization support: reference U42_V[j-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(45,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(50,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(603,36)
   remark #15389: vectorization support: reference U42_V[k-result.smallend.smallend] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(53,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 94.250 
   remark #15478: estimated potential speedup: 0.620 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(216,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(217,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(220,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(221,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(222,19) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.386
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 43 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 7.090 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(220,19) ]
         remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(221,19) ]
         remark #15388: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(222,19) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.842
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 43 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 7.090 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(219,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(67,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(68,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.273
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,23) ]
         remark #15389: vectorization support: reference p[i+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,53) ]
         remark #15389: vectorization support: reference p[i-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(71,67) ]
         remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(72,67) ]
         remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,23) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,53) ]
         remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(73,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.654
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 150 
         remark #15477: vector cost: 16.000 
         remark #15478: estimated potential speedup: 8.370 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(70,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(82,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(83,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27) and p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (84:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (84:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(89,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(90,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27) and p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U73_V.U73_V+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V (91:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[(j-U73_V.U (91:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(101,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(102,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27) and p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1+1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (103:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (103:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(108,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(109,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27) and p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27)
      remark #15346: vector dependence: assumed ANTI dependence between p[U74_V.U74_V-1-1-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(k-U73 (110:27) and ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[U74_V.U74_ (110:27)
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(120,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,64) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(123,87) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(124,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(122,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(128,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,56) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,76) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(131,94) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(130,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(141,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,63) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(144,86) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(145,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(143,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(149,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,57) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,77) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+(k-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(152,95) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(151,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(162,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,66) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(165,89) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(166,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 86 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 6.580 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(164,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(170,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,58) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,78) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U73_V.U73_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(173,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 6.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(172,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(183,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.240
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,65) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(186,88) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,42) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-2-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(187,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.629
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 95 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 7.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(185,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(191,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15388: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.278
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(U74_V.U74_V-1-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,27) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,59) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,79) ]
      remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8f_V.U8f_V+(U74_V.U74_V-1+1-U73_V.U73_V)*U8f_V.U8f_V+nu*U8f_V.U8f_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(194,97) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.704
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 75 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(193,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(232,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(233,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(235,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between U7d_V (240:88) and U7d_V (239:90)
         remark #15346: vector dependence: assumed OUTPUT dependence between U7d_V (239:90) and U7d_V (240:88)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(273,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(274,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(275,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,50) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.302
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 4 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 133 
            remark #15477: vector cost: 12.000 
            remark #15478: estimated potential speedup: 9.700 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+n*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(278,50) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(279,50) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15388: vectorization support: reference ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+ncomp*2)*U8b_V.U8b_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,27) ]
            remark #15389: vectorization support: reference sf.p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+2*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(280,50) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.689
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 4 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 133 
            remark #15477: vector cost: 12.000 
            remark #15478: estimated potential speedup: 9.700 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(277,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(311,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(613,5)
   remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+fine_comp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,25) ]
   remark #15389: vectorization support: reference Ub0_V.Ub0_V.Ub0_V.Ub0_V.Ub0_V[i-U71_V.U71_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[ic-U73_V.U73_V+(jc-U73_V.U73_V)*U8f_V.U8f_V+(kc-U73_V.U73_V)*U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(313,47) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(314,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(315,49) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ccfab.__b_N5amrex7BaseFabIdEE.__b_N5amrex7BaseFabIdEE[ic-U73_V.U>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(316,49) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.112
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 206.000 
   remark #15478: estimated potential speedup: 0.630 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(583,52)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(227,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(608,5)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(305,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(613,5)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(306,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(613,5)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(308,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(613,5)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeProtected::protect(amrex::CellConservativeProtected *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(658,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(659,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(660,5)
   remark #26015: Exception can be thrown by the call to amrex::CoordSys::GetEdgeVolCoord(const amrex::CoordSys *, amrex::Vector<amrex::Real, std::allocator<double>> &, const amrex::Box &, int) const   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(662,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(662,19) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(700,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(700,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(659,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_vector.h(414,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(658,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_vector.h(414,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(646,48)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::Interpolater::GetBCArray(amrex::Vector<int, std::allocator<int>> *, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(230,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(230,41)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(230,41)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(230,41)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(236,9)
   remark #26015: Exception can be thrown by the call to amrex::detail::Assert_host_doit(const char *, const char *, int, const char *)   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(232,29)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellQuadratic::CoarseBox(amrex::CellQuadratic *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(384,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellQuadratic::CoarseBox(amrex::CellQuadratic *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(375,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellQuadratic::interp(amrex::CellQuadratic *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(424,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(424,27)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(424,27)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(442,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(442,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(442,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(450,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(451,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(452,5)
   remark #26015: Exception can be thrown by the call to amrex::CoordSys::GetEdgeVolCoord(const amrex::CoordSys *, amrex::Vector<amrex::Real, std::allocator<double>> &, const amrex::Box &, int) const   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(454,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(454,19) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(476,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(476,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(451,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_vector.h(414,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(450,18)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_vector.h(414,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(411,51)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(335,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(440,27)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::PCInterp::CoarseBox(amrex::PCInterp *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(499,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::PCInterp::CoarseBox(amrex::PCInterp *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(506,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::PCInterp::interp(amrex::PCInterp *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(474,17) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(529,5)
   remark #15389: vectorization support: reference p[i-U73_V.U73_V+(j-U73_V.U73_V)*U8b_V.U8b_V+(k-U73_V.U73_V)*U8b_V.U8b_V+(n+fine_comp)*U8b_V.U8b_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(476,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[U68_V-U73_V.U73_V+(jc-U73_V.U73_V)*U8f_V.U8f_V+(kc-U73_V.U73_V>, 64-bit indexed, part of index is conditional   [ /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(476,47) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.059
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 74 
   remark #15477: vector cost: 101.750 
   remark #15478: estimated potential speedup: 0.720 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(468,5) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(529,5)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(469,9) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(529,5)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interp_3D_C.H(471,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(529,5)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeQuartic::CoarseBox(amrex::CellConservativeQuartic *, const amrex::Box &, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(726,34)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeQuartic::CoarseBox(amrex::CellConservativeQuartic *, const amrex::Box &, const amrex::IntVect &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(735,36)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::CellConservativeQuartic::interp(amrex::CellConservativeQuartic *, const amrex::FArrayBox &, int, amrex::FArrayBox &, int, int, const amrex::Box &, const amrex::IntVect &, const amrex::Geometry &, const amrex::Geometry &, const amrex::Vector<amrex::BCRec, std::allocator<amrex::BCRec>> &, int, int, amrex::RunOn)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(798,23)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(798,23)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(798,23)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(802,23)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(802,23)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(802,23)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(807,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(807,24)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(807,24)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Box.H(742,13) inlined into /home/zou00066/peleLM/amrex/Src/AmrCore/AMReX_Interpolater.cpp(772,48)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: MPI::Datatype::Get_contents(const MPI::Datatype *, int, int, int, int *, MPI::Aint *, MPI::Datatype *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
   remark #15388: vectorization support: reference c_datatypes[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(88,22) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <array_of_datatypes->mpi_datatype[i]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(88,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Comm::Alltoallw(const MPI::Comm *, const void *, const int *, const int *, const MPI::Datatype *, void *, const int *, const int *, const MPI::Datatype *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
   remark #15388: vectorization support: reference data_type_tbl[i_rank] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(426,9) ]
   remark #15388: vectorization support: reference data_type_tbl[i_rank+comm_size] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(427,9) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <sendtypes->mpi_datatype[i_rank]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(90,50) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <recvtypes->mpi_datatype[i_rank]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(90,50) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.400
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Create_cart(MPI::Cartcomm *, const MPI::Intracomm *, int, const int *, const bool *, bool) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,28) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Spawn_multiple(MPI::Intercomm *, MPI::Intracomm *, int, const char **, const char ***, const int *, const MPI::Info *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
   remark #15388: vectorization support: reference mpi_info_tbl[i_tbl] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(205,8) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <array_of_info->mpi_info[i_tbl]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/info.h(73,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Spawn_multiple(MPI::Intercomm *, MPI::Intracomm *, int, const char **, const char ***, const int *, const MPI::Info *, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
   remark #15388: vectorization support: reference mpi_info_tbl[i_tbl] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(205,8) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <array_of_info->mpi_info[i_tbl]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/info.h(73,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Get_topo(const MPI::Cartcomm *, int, int *, bool *, int *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,27) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,5) ]
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,18) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 3.260 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,5) ]
   remark #15389: vectorization support: reference int_periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.867
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 3.260 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Sub(MPI::Cartcomm *, const MPI::Cartcomm *, const bool *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
   remark #15388: vectorization support: reference int_remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,5) ]
   remark #15388: vectorization support: reference remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,31) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,5) ]
   remark #15389: vectorization support: reference remain_dims[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Map(const MPI::Cartcomm *, int, const int *, const bool *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,28) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================
