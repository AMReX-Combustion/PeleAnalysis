Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I. -I. -I/home/zou00066/peleLM/amrex/Src/Base -I/home/zou00066/peleLM/amrex/Src/Boundary -I/home/zou00066/peleLM/amrex/Src/EB -I/home/zou00066/peleLM/amrex/Src/AmrCore -I../Tools/SDFGen -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi -I/share/apps/opt/HWLOC/2.1.0/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/opal/mca/event/libevent2022/libevent/include -I/stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include -g -O2 -ip -qopt-report=5 -qopt-report-phase=vec -std=c++14 -pthread -DBL_USE_MPI -DAMREX_USE_MPI -DAMREX_GIT_VERSION="20.06-82-gdf3e65beac99-dirty" -DAMREX_LAUNCH= -DAMREX_DEVICE= -DAMREX_CUDA_FORT_GLOBAL= -DAMREX_CUDA_FORT_DEVICE= -DAMREX_CUDA_FORT_HOST= -DAMREX_CUDA_FORT_HOST_DEVICE= -DBL_SPACEDIM=3 -DAMREX_SPACEDIM=3 -DBL_FORT_USE_UNDERSCORE -DAMREX_FORT_USE_UNDERSCORE -DBL_Linux -DAMREX_Linux -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION -DAMREX_USE_EB -c -o tmp_build_dir/o/3d.intel.MPI.EXE/AMReX_ForkJoin.o -pthread

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>, std::allocator<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>>::pointer>(std::_Vector_base<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>, std::allocator<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>>::pointer, std::_Vector_base<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>, std::allocator<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>, std::allocator<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>>::pointer>(std::_Vector_base<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>, std::allocator<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>>::pointer, std::_Vector_base<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>, std::allocator<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>::pointer>(std::_Vector_base<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>::pointer, std::_Vector_base<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_construct.h(104,6)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MPI::Datatype::Get_contents(const MPI::Datatype *, int, int, int, int *, MPI::Aint *, MPI::Datatype *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
   remark #15388: vectorization support: reference c_datatypes[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(88,22) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <array_of_datatypes->mpi_datatype[i]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(88,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype_inln.h(369,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Comm::Alltoallw(const MPI::Comm *, const void *, const int *, const int *, const MPI::Datatype *, void *, const int *, const int *, const MPI::Datatype *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
   remark #15388: vectorization support: reference data_type_tbl[i_rank] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(426,9) ]
   remark #15388: vectorization support: reference data_type_tbl[i_rank+comm_size] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(427,9) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <sendtypes->mpi_datatype[i_rank]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(90,50) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <recvtypes->mpi_datatype[i_rank]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/datatype.h(90,50) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.400
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/comm_inln.h(425,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Create_cart(MPI::Cartcomm *, const MPI::Intracomm *, int, const int *, const bool *, bool) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,28) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(105,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(104,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Spawn_multiple(MPI::Intercomm *, MPI::Intracomm *, int, const char **, const char ***, const int *, const MPI::Info *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
   remark #15388: vectorization support: reference mpi_info_tbl[i_tbl] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(205,8) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <array_of_info->mpi_info[i_tbl]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/info.h(73,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(189,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Intracomm::Spawn_multiple(MPI::Intercomm *, MPI::Intracomm *, int, const char **, const char ***, const int *, const MPI::Info *, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
   remark #15388: vectorization support: reference mpi_info_tbl[i_tbl] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(205,8) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <array_of_info->mpi_info[i_tbl]>, stride is 2   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/info.h(73,39) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(204,4) inlined into /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/intracomm_inln.h(222,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Get_topo(const MPI::Cartcomm *, int, int *, bool *, int *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,27) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(73,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(72,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,5) ]
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,18) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 3.260 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(76,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,5) ]
   remark #15389: vectorization support: reference int_periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(77,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.867
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 3.260 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Sub(MPI::Cartcomm *, const MPI::Cartcomm *, const bool *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
   remark #15388: vectorization support: reference int_remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,5) ]
   remark #15388: vectorization support: reference remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,31) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_remain_dims[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,5) ]
   remark #15389: vectorization support: reference remain_dims[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(110,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(109,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MPI::Cartcomm::Map(const MPI::Cartcomm *, int, const int *, const bool *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,5) ]
   remark #15388: vectorization support: reference periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,28) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference int_periods[i] has aligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,5) ]
   remark #15389: vectorization support: reference periods[i] has unaligned access   [ /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(123,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 4.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /stage/opt/OpenMPI/4.0.2/Intel/2019_U4_EPYC_MLNX/include/openmpi/ompi/mpi/cxx/topology_inln.h(122,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::unordered_map<std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>>::~unordered_map(std::unordered_map<std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /usr/include/c++/4.8.5/bits/unordered_map.h(98,11)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/unordered_map.h(98,11)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/unordered_map.h(98,11)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::ForkJoin(amrex::ForkJoin *, const amrex::Vector<amrex::Real, std::allocator<double>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(55,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(55,29)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(55,29)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(55,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(58,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::ForkJoin(amrex::ForkJoin *const, const amrex::Vector<amrex::Real, std::allocator<double>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(51,11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(51,11)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(51,11)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(51,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(58,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(51,11)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::ComponentBounds(const amrex::ForkJoin *, const std::string &, int) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(173,36)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::reg_mf(amrex::ForkJoin *, amrex::MultiFab &, const std::string &, int, amrex::ForkJoin::Strategy, amrex::ForkJoin::Intent, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function ?1memset cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_IntVect.H(87,15) ]
   remark #15382: vectorization support: call to function std::vector<amrex::ForkJoin::ComponentSet, std::allocator<amrex::ForkJoin::ComponentSet>>::vector(std::vector<amrex::ForkJoin::ComponentSet, std::allocator<amrex::ForkJoin::ComponentSet>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>>::vector(std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function ?1memset cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_IntVect.H(87,15) ]
   remark #15382: vectorization support: call to function std::vector<amrex::ForkJoin::ComponentSet, std::allocator<amrex::ForkJoin::ComponentSet>>::vector(std::vector<amrex::ForkJoin::ComponentSet, std::allocator<amrex::ForkJoin::ComponentSet>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>>::vector(std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(110,20)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(111,20)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(113,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(122,16)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(123,25)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(137,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(137,21)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(137,21)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>>::~vector(std::vector<amrex::MultiFab, std::allocator<amrex::MultiFab>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::modify_ngrow(amrex::ForkJoin *, const std::string &, int, amrex::IntVect)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(147,5)
   remark #26015: Exception can be thrown by the call to amrex::detail::Assert_host_doit(const char *, const char *, int, const char *)   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1064,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(143,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(143,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(143,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(151,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(151,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::modify_split(amrex::ForkJoin *, const std::string &, int, amrex::Vector<amrex::ForkJoin::ComponentSet, std::allocator<amrex::ForkJoin::ComponentSet>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1064,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(157,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(157,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(157,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(163,25)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(167,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(167,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::copy_data_to_tasks(amrex::ForkJoin *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(208,32)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(208,32)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(185,20)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(187,42)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(194,20)
         remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(194,20)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(195,33)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/ext/new_allocator.h(104,27) ]

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(229,32)
            remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(229,32)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(208,32)
            remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(208,32)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::MFInfo::~MFInfo(amrex::MFInfo *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArray.H(114,8)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and call:std::basic_string<char, std::char_traits<char>, std::alloca (249:5)
   remark #15346: vector dependence: assumed FLOW dependence between call:std::basic_string<char, std::char_traits<char>, std::alloca (249:5) and __first->_M_p (539:9)
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<amrex::MultiFab, std::allocator<amrex::MultiFab>>::pointer>(std::_Vector_base<amrex::MultiFab, std::allocator<amrex::MultiFab>>::pointer, std::_Vector_base<amrex::MultiFab, std::allocator<amrex::MultiFab>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::Redistribute(amrex::FabArray<amrex::FArrayBox> *, const amrex::FabArray<amrex::FArrayBox> &, int, int, int, const amrex::IntVect &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(n+scomp)*U2bc_V.U2bc_V] has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 31 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 17.780 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(798,42)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::get_dm(amrex::ForkJoin *, const amrex::BoxArray &, int, const amrex::DistributionMapping &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(290,16)
   remark #15527: loop was not vectorized: function call to ?1memset cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(290,16)
   remark #15527: loop was not vectorized: function call to ?1memset cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(287,23)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(287,23)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(287,23)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(287,23)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(287,23)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(290,16)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(290,16)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(290,16)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(300,24)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParallelContext.H(95,76) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::copy_data_from_tasks(amrex::ForkJoin *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+n*U2bc_V.U2bc_V] has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 30 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 17.270 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+n*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+n*U2bc_V.U2bc_V] has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 29 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 16.760 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(803,13) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(247,20)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(249,42)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(257,41)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/ostream(385,15) ]

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(798,42) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(264,30)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
         LOOP END
      LOOP END

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(798,42) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(272,26)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::ParallelCopy(amrex::FabArray<amrex::FArrayBox> *, const amrex::FabArray<amrex::FArrayBox> &, int, int, int, const amrex::IntVect &, const amrex::IntVect &, const amrex::Periodicity &, amrex::FabArrayBase::CpOp, const amrex::FabArrayBase::CPC *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 31 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 17.780 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(363,21)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.700
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 48 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 15.220 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access
            remark #15389: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(k-U2ba_V.U2ba_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.083
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 48 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 15.220 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(368,21)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algo.h(4630,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(444,38)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algo.h(4630,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(444,38)
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.725
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 3.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algo.h(4630,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(444,38)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.417
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 3.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algo.h(4630,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(444,38)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
            remark #15388: vectorization support: reference dptr[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+n*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1234,25) ]
            remark #15388: vectorization support: reference p[i-U1de_V.U1de_V.U1de_V.U1de_V+(j-U1de_V.U1de_V.U1de_V.U1de_V)*U2bc_V.U2bc_V+(k-U1de_V.U1de_V.U1de_V.U1de_V)*U2bc_V.U2bc_V+(n+SC)*U2bc_V.U2bc_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1234,44) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 30 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 17.270 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(737,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(575,42)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <__first->_ucount>, stride is 3   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(739,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(737,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(575,42)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(737,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(575,42)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <__first->_cancelled>, stride is 6   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(739,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <__first->MPI_ERROR>, stride is 6   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(739,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <__first->MPI_TAG>, stride is 6   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(739,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <__first->MPI_SOURCE>, stride is 6   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(739,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.086
   remark #15453: unmasked strided stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 35.000 
   remark #15478: estimated potential speedup: 0.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(737,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(575,42)
<Remainder, Distributed chunk2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(354,54)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(426,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(441,13) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(466,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(477,35) ]

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(472,40)
         remark #15523: loop was not vectorized: loop control variable U1c8_V.U1c8_V was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(497,17)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1220,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1226,36) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(513,17)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(517,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(564,6)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(569,58)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>>::vector(std::vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>> *, std::vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>>::size_type, const std::vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>>::value_type &, const std::vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(285,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(285,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.290 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(285,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::fabPtr(const amrex::FabArray<amrex::FArrayBox> *, int) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArray.H(930,14)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::PostRcvs(amrex::FabArray<amrex::FArrayBox> *, const amrex::FabArrayBase::MapOfCopyComTagContainers &, char *&, amrex::Vector<char *, std::allocator<char *>> &, amrex::Vector<std::size_t, std::allocator<unsigned long>> &, amrex::Vector<int, std::allocator<int>> &, amrex::Vector<MPI_Request, std::allocator<MPI_Request>> &, int, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(715,27)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(718,32)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(721,30)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayCommI.H(751,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::unpack_recv_buffer_cpu(amrex::FabArray<amrex::FArrayBox> &, int, int, const amrex::Vector<char *, std::allocator<char *>> &, const amrex::Vector<std::size_t, std::allocator<unsigned long>> &, const amrex::Vector<const amrex::FabArrayBase::CopyComTagsContainer *, std::allocator<const amrex::FabArrayBase::CopyComTagsContainer *>> &, amrex::FabArrayBase::CpOp, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2152,9) ]
            remark #15388: vectorization support: reference dptr[i-U18f_V.U18f_V.U18f_V.U18f_V+(j-U18f_V.U18f_V.U18f_V.U18f_V)*s.jstride+(k-U18f_V.U18f_V.U18f_V.U18f_V)*s.kstride+n*s.nstride] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2152,9) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 30 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 17.270 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1272,39)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15388: vectorization support: reference dptr[i-U195_V.U195_V.U195_V.U195_V+(j-U195_V.U195_V.U195_V.U195_V)*s.jstride+(k-U195_V.U195_V.U195_V.U195_V)*s.kstride+n*s.nstride] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.700
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 47 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 14.960 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15389: vectorization support: reference dptr[i-U195_V.U195_V.U195_V.U195_V+(j-U195_V.U195_V.U195_V.U195_V)*s.jstride+(k-U195_V.U195_V.U195_V.U195_V)*s.kstride+n*s.nstride] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(2180,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.083
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 47 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 14.960 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1276,39)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,24)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>::vector(std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidC (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidC (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,24)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>::vector(std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidC (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::VoidCopyTag, std::allocator<amrex::VoidC (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,24)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,24)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1309,37)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1317,29) ]
               remark #15388: vectorization support: reference p[i-U1e9_V.U1e9_V.U1e9_V.U1e9_V+(j-U1e9_V.U1e9_V.U1e9_V.U1e9_V)*U2c0_V.U2c0_V+(k-U1e9_V.U1e9_V.U1e9_V.U1e9_V)*U2c0_V.U2c0_V+n*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1317,51) ]
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 4.667
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 30 
               remark #15477: vector cost: 1.500 
               remark #15478: estimated potential speedup: 17.270 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1315,21)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,29) ]
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,29) ]
               remark #15388: vectorization support: reference p[i-U1ea_V.U1ea_V.U1ea_V.U1ea_V+(j-U1ea_V.U1ea_V.U1ea_V.U1ea_V)*U2c0_V.U2c0_V+(k-U1ea_V.U1ea_V.U1ea_V.U1ea_V)*U2c0_V.U2c0_V+n*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,52) ]
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.700
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 47 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 14.960 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
            <Remainder loop for vectorization>
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,29) ]
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,29) ]
               remark #15389: vectorization support: reference p[i-U1ea_V.U1ea_V.U1ea_V.U1ea_V+(j-U1ea_V.U1ea_V.U1ea_V.U1ea_V)*U2c0_V.U2c0_V+(k-U1ea_V.U1ea_V.U1ea_V.U1ea_V)*U2c0_V.U2c0_V+n*U2c0_V.U2c0_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1325,52) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.083
               remark #15301: REMAINDER LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 47 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 14.960 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1323,21)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1331,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1259,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1265,40)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1269,36)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,24)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1287,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1293,40)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1296,35)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1296,50)
         remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_FBI.H(1305,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::LayoutData<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>::~LayoutData(amrex::LayoutData<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_LayoutData.H(34,61)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::vector<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>, std::allocator<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>>::~vector(std::vector<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>, std::allocator<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArray<amrex::FArrayBox>::PC_local_cpu(amrex::FabArray<amrex::FArrayBox> *, const amrex::FabArrayBase::CPC &, const amrex::FabArray<amrex::FArrayBox> &, int, int, int, amrex::FabArrayBase::CpOp)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(1851,5) ]
            remark #15388: vectorization support: reference p[i+offset.x-U186_V.U186_V.U186_V.U186_V+(j+offset.y-U186_V.U186_V.U186_V.U186_V)*U2bc_V.U2bc_V+(k+offset.z-U186_V.U186_V.U186_V.U186_V)*U2bc_V.U2bc_V+(n+scomp)*U2bc_V.U2bc_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(1851,5) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 34 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 19.280 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(28,36)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15388: vectorization support: reference p[i+offset.x-U18a_V.U18a_V.U18a_V.U18a_V+(j+offset.y-U18a_V.U18a_V.U18a_V.U18a_V)*U2bc_V.U2bc_V+(k+offset.z-U18a_V.U18a_V.U18a_V.U18a_V)*U2bc_V.U2bc_V+(n+scomp)*U2bc_V.U2bc_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.700
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 51 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 15.970 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(n+dcomp)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15389: vectorization support: reference p[i+offset.x-U18a_V.U18a_V.U18a_V.U18a_V+(j+offset.y-U18a_V.U18a_V.U18a_V.U18a_V)*U2bc_V.U2bc_V+(k+offset.z-U18a_V.U18a_V.U18a_V.U18a_V)*U2bc_V.U2bc_V+(n+scomp)*U2bc_V.U2bc_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_BaseFab.H(3164,5) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.083
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 51 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 15.970 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(32,36)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,72)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>::vector(std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::alloc (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::alloc (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,72)
   remark #15382: vectorization support: call to function memset(void *, int, unsigned long) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/stl_construct.h(75,7) ]
   remark #15382: vectorization support: call to function std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>::vector(std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>> *const) cannot be vectorized   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_Vector.H(22,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:memset(void *, int, unsigned long) (75:7) and call:std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::alloc (22:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::vector<amrex::FabCopyTag<amrex::FArrayBox>, std::alloc (22:7) and call:memset(void *, int, unsigned long) (75:7)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,72)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,72)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(57,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(64,29) ]
               remark #15388: vectorization support: reference p[i+U151_V.U151_V-U1d6_V.U1d6_V.U1d6_V.U1d6_V+(j+U151_V.U151_V-U1d6_V.U1d6_V.U1d6_V.U1d6_V)*U2bc_V.U2bc_V+(k+U151_V.U151_V-U1d6_V.U1d6_V.U1d6_V.U1d6_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(64,51) ]
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 4.667
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 34 
               remark #15477: vector cost: 1.500 
               remark #15478: estimated potential speedup: 19.280 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(62,21)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(70,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(204,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(205,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(206,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,29) ]
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,29) ]
               remark #15388: vectorization support: reference p[i+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V+(j+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V)*U2bc_V.U2bc_V+(k+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,52) ]
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.700
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 51 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 15.970 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
            <Remainder loop for vectorization>
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,29) ]
               remark #15388: vectorization support: reference p[i-U2ba_V.U2ba_V+(j-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(k-U2ba_V.U2ba_V)*U2c0_V.U2c0_V+(dcomp+n)*U2c0_V.U2c0_V] has aligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,29) ]
               remark #15389: vectorization support: reference p[i+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V+(j+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V)*U2bc_V.U2bc_V+(k+U151_V.U151_V-U1da_V.U1da_V.U1da_V.U1da_V)*U2bc_V.U2bc_V+(scomp+n)*U2bc_V.U2bc_V] has unaligned access   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(77,52) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.083
               remark #15301: REMAINDER LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 51 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 15.970 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_Loop.H(208,5) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(75,21)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(83,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(18,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(24,40)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(25,37)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,72)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(39,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(45,27)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(44,45)
      remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_PCI.H(51,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::FabArrayBase::localindex(const amrex::FabArrayBase *, int) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(960,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_FabArrayBase.H(123,70)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: amrex::LayoutData<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>::~LayoutData(amrex::LayoutData<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_LayoutData.H(34,61)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::vector<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>, std::allocator<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>>::~vector(std::vector<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>, std::allocator<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::split_tasks(amrex::ForkJoin *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(333,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::get_io_filename(std::string *, amrex::ForkJoin *, bool)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(36,32) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(372,41)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(20,28) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(372,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(22,16) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(380,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/basic_string.h(2405,51) ]
LOOP END
===========================================================================

Begin optimization report for: amrex::LayoutData<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>>::~LayoutData(amrex::LayoutData<amrex::Vector<amrex::FabCopyTag<amrex::FArrayBox>, std::allocator<amrex::FabCopyTag<amrex::FArrayBox>>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_LayoutData.H(34,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: amrex::LayoutData<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>>::~LayoutData(amrex::LayoutData<amrex::Vector<amrex::VoidCopyTag, std::allocator<amrex::VoidCopyTag>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_LayoutData.H(34,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (160:9) and call:operator delete(void *) (110:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:operator delete(void *) (110:9) and __first->_M_start (160:9)
LOOP END
===========================================================================

Begin optimization report for: amrex::ParmParse::~ParmParse(amrex::ParmParse *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/deque.tcc(804,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
      remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
      remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
      remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_deque.h(641,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ParmParse.H(240,7)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::_Deque_base<std::string, std::allocator<std::string>>::~_Deque_base(std::_Deque_base<std::string, std::allocator<std::string>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_deque.h(641,7) inlined into /usr/include/c++/4.8.5/bits/stl_deque.h(566,4)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: amrex::ForkJoin::init(amrex::ForkJoin *, const amrex::Vector<int, std::allocator<int>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_numeric.h(126,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(84,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_numeric.h(126,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(84,5)
   remark #15388: vectorization support: reference *__first._M_current has aligned access   [ /usr/include/c++/4.8.5/bits/stl_numeric.h(127,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 4.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.430 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_numeric.h(126,22) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(84,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(89,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/deque.tcc(804,8) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
      remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
      remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
      remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4(volatile void *, unsigned int, int) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) cannot be vectorized   [ /usr/include/c++/4.8.5/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_p (539:9) and *__mem (68:6)
   remark #15346: vector dependence: assumed FLOW dependence between *__mem (68:6) and __first->_M_p (539:9)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_deque.h(641,7) inlined into /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(95,5)
   remark #15382: vectorization support: call to function operator delete(void *) cannot be vectorized   [ /usr/include/c++/4.8.5/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(78,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(91,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END

LOOP BEGIN at /home/zou00066/peleLM/amrex/Src/Base/AMReX_ForkJoin.cpp(97,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/zou00066/peleLM/amrex/Src/Base/AMReX.H(149,9) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>::pointer>(std::_Vector_base<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>::pointer, std::_Vector_base<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_insert_unique_node(std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::size_type, std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::__hash_code, std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::__node_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(1336,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_deallocate_node(std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::_Hashtable<std::string, std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>, std::allocator<std::pair<const std::string, amrex::Vector<amrex::ForkJoin::MFFork, std::allocator<amrex::ForkJoin::MFFork>>>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::__node_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(747,27)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(747,27)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::~map(std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

            LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
            LOOP END
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

            LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
            LOOP END
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1126,4)
         remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1128,4)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type>::_M_destroy_node(std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_type, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type, std::_Select1st<std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::value_type>, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::key_compare, std::map<amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>, std::less<amrex::BoxArray::RefID>, std::allocator<std::pair<const amrex::BoxArray::RefID, amrex::Vector<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>, std::allocator<std::unique_ptr<amrex::DistributionMapping, std::default_delete<amrex::DistributionMapping>>>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(422,26)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================
